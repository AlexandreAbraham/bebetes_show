#include <math.h>
#include <stdio.h>
#include <gtk/gtk.h>
#include <gdk/gdk.h>
#include "icons.h"
#include "gtkplot.h"
#include "gtkplotdata.h"
#include "gtkplotbar.h"
#include "gtkplotcanvas.h"
#include "gtkplotcanvastext.h"
#include "gtkplotcanvasline.h"
#include "gtkplotcanvasellipse.h"
#include "gtkplotcanvasrectangle.h"
#include "gtkplotcanvasplot.h"
#include "gtkplotcanvaspixmap.h"
#include "gtkplotps.h"
#include "gtkplotprint.h"

GdkPixmap *pixmap;
GtkWidget **plots;
GtkWidget **buttons;
GtkPlotData *dataset[5];
gint nlayers = 0;
GtkWidget *active_plot;

static void put_child(GtkPlotCanvas *canvas, gdouble x, gdouble y);

gdouble function(GtkPlot *plot, GtkPlotData *data, gdouble x, gboolean *err)
{
 gdouble y;
 *err = FALSE;
 y = (-.5+.3*sin(3.*x)*sin(50.*x));

 return y;
}

gdouble gaussian(GtkPlot *plot, GtkPlotData *data, gdouble x, gboolean *err)
{
 gdouble y;
 *err = FALSE;
 y = .65*exp(-.5*pow(x-.5,2)/.02);

 return y;
}

gint
activate_plot(GtkWidget *widget, gpointer data)
{
  GtkWidget **widget_list = NULL;
  GtkWidget *active_widget = NULL;
  GtkWidget *canvas = NULL;
  gint n = 0;

  canvas = GTK_WIDGET(data);
  widget_list = buttons;
  active_widget = widget;


  while(n < nlayers)
    {
      gtk_signal_handler_block_by_func(GTK_OBJECT(buttons[n]), GTK_SIGNAL_FUNC(activate_plot), data);
      if(widget_list[n] == active_widget){
            active_plot = plots[n];  
            gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(buttons[n]), TRUE);
      }else{
            gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(buttons[n]), FALSE);
      }
      gtk_signal_handler_unblock_by_func(GTK_OBJECT(buttons[n]), GTK_SIGNAL_FUNC(activate_plot), data);
      
      n++;
    }

  return FALSE;
}


GtkWidget *
new_layer(GtkWidget *canvas)
{
 gchar label[10];
 GtkRequisition req;
 gint size;

 nlayers++;

 buttons = (GtkWidget **)g_realloc(buttons, nlayers * sizeof(GtkWidget *));
 plots = (GtkWidget **)g_realloc(plots, nlayers * sizeof(GtkWidget *));

 sprintf(label, "%d", nlayers);
 
 buttons[nlayers-1] = gtk_toggle_button_new_with_label(label);

 gtk_widget_size_request(buttons[nlayers-1], &req);
 size = MAX(req.width,req.height);
 gtk_widget_set_usize(buttons[nlayers-1], size, size); 
 gtk_fixed_put(GTK_FIXED(canvas), buttons[nlayers-1], (nlayers-1)*size, 0);
 gtk_widget_show(buttons[nlayers-1]);

 gtk_signal_connect(GTK_OBJECT(buttons[nlayers-1]), "toggled",
                    (GtkSignalFunc) activate_plot, canvas);

 plots[nlayers-1] = gtk_plot_new_with_size(NULL, .5, .25);
 gtk_widget_show(plots[nlayers-1]);

 activate_plot(buttons[nlayers-1],canvas);

 return plots[nlayers-1];
}

gboolean
my_tick_label(GtkPlotAxis *axis, gdouble *tick_value, gchar *label, gpointer data)
{
  gboolean return_value = FALSE;

  if(*tick_value == 0.0){
    g_snprintf(label, 100, "custom label at 0.0");
    return_value = TRUE;
  }
  return return_value;
}


void
build_example2(GtkWidget *plot)
{
 GdkColor color;
 static double px2[] = {.1, .2, .3, .4, .5, .6, .7, .8};
 static double py2[] = {.012, .067, .24, .5, .65, .5, .24, .067};
 static double dx2[] = {.1, .1, .1, .1, .1, .1, .1, .1};

 dataset[4] = gtk_plot_add_function(GTK_PLOT(plot), (GtkPlotFunc)gaussian);
 gtk_widget_show(GTK_WIDGET(dataset[4]));
 gdk_color_parse("dark green", &color);
 gdk_color_alloc(gdk_colormap_get_system(), &color); 
 gtk_plot_data_set_line_attributes(dataset[4],
                                   GTK_PLOT_LINE_DASHED,
                                   0, 0, 2, &color);

 gtk_plot_data_set_legend(dataset[4], "Gaussian");


 gdk_color_parse("blue", &color);
 gdk_color_alloc(gdk_colormap_get_system(), &color); 

 dataset[2] = GTK_PLOT_DATA(gtk_plot_bar_new(GTK_ORIENTATION_VERTICAL));
 gtk_plot_add_data(GTK_PLOT(plot), dataset[2]);
 gtk_widget_show(GTK_WIDGET(dataset[2]));
 gtk_plot_data_set_points(dataset[2], px2, py2, dx2, NULL, 8);

 gtk_plot_data_set_symbol(dataset[2],
                          GTK_PLOT_SYMBOL_NONE,
			  GTK_PLOT_SYMBOL_OPAQUE,
                          10, 2, &color, &color);

 gtk_plot_data_set_line_attributes(dataset[2],
                                   GTK_PLOT_LINE_NONE,
                                   0, 0, 1, &color);
 gtk_plot_data_set_legend(dataset[2], "V Bars");

 gtk_plot_set_break(GTK_PLOT(plot), GTK_PLOT_AXIS_Y, 0.7, 0.72, .05, 4, GTK_PLOT_SCALE_LINEAR, .6);
}

GtkWidget* test_stat()
{
 GtkWidget *vbox1;
 GtkWidget *scrollw1;
 GtkWidget *canvas;
 GtkPlotCanvasChild *child;
 GdkColor color;
 gint page_width, page_height;
 gfloat scale = 1.;
 gchar *custom_labels[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
 GtkPlotArray *array;
 
 page_width = GTK_PLOT_LETTER_W * scale;
 page_height = GTK_PLOT_LETTER_H * scale;
 


 vbox1=gtk_vbox_new(FALSE,0);

 scrollw1=gtk_scrolled_window_new(NULL, NULL);
 gtk_container_border_width(GTK_CONTAINER(scrollw1),0);
 gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(scrollw1),
				GTK_POLICY_ALWAYS,GTK_POLICY_ALWAYS);
 gtk_box_pack_start(GTK_BOX(vbox1),scrollw1, TRUE, TRUE,0);
 gtk_widget_show(scrollw1);

 canvas = gtk_plot_canvas_new(page_width, page_height, 1.0);
 GTK_PLOT_CANVAS_SET_FLAGS(GTK_PLOT_CANVAS(canvas), GTK_PLOT_CANVAS_DND_FLAGS);
 gtk_scrolled_window_add_with_viewport(GTK_SCROLLED_WINDOW(scrollw1), canvas);


 active_plot = new_layer(canvas);

 gtk_plot_legends_set_attributes(GTK_PLOT(active_plot),
                                 NULL, 0,
				 NULL,
                                 &color);
 gtk_plot_set_range(GTK_PLOT(active_plot), 0. , 1., 0., .85);

 gtk_plot_axis_set_labels_numbers(gtk_plot_get_axis(GTK_PLOT(active_plot), GTK_PLOT_AXIS_LEFT), GTK_PLOT_LABEL_FLOAT, 2);
 gtk_plot_axis_set_labels_numbers(gtk_plot_get_axis(GTK_PLOT(active_plot), GTK_PLOT_AXIS_RIGHT), GTK_PLOT_LABEL_FLOAT, 2);
 gtk_plot_axis_set_visible(gtk_plot_get_axis(GTK_PLOT(active_plot), GTK_PLOT_AXIS_TOP), TRUE);
 gtk_plot_axis_set_visible(gtk_plot_get_axis(GTK_PLOT(active_plot), GTK_PLOT_AXIS_RIGHT), TRUE);
 gtk_plot_grids_set_visible(GTK_PLOT(active_plot), TRUE, TRUE, TRUE, TRUE);
 gtk_plot_axis_hide_title(gtk_plot_get_axis(GTK_PLOT(active_plot), GTK_PLOT_AXIS_TOP));
 gtk_plot_axis_hide_title(gtk_plot_get_axis(GTK_PLOT(active_plot), GTK_PLOT_AXIS_RIGHT));
 gtk_plot_set_legends_border(GTK_PLOT(active_plot), 2, 3);
 gtk_plot_legends_move(GTK_PLOT(active_plot), .58, .05);
 gtk_widget_show(active_plot);

 child = gtk_plot_canvas_plot_new(GTK_PLOT(active_plot));
 gtk_plot_canvas_put_child(GTK_PLOT_CANVAS(canvas), child, .15, .4, .65, .65);
 gtk_widget_show(active_plot);

 build_example2(active_plot);
 
   
 child = gtk_plot_canvas_text_new("Times-BoldItalic", 16, 0, NULL, NULL, TRUE,
                          GTK_JUSTIFY_CENTER,
                          "DnD titles, legends and plots");
 gtk_plot_canvas_put_child(GTK_PLOT_CANVAS(canvas), child, .40, .020, .0, .0);
 child = gtk_plot_canvas_text_new("Times-Roman", 16, 0, NULL, NULL, TRUE,
                          GTK_JUSTIFY_CENTER,
                          "You can use \\ssubscripts\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\N\\Ssuperscripts");
 gtk_plot_canvas_put_child(GTK_PLOT_CANVAS(canvas), child, .40, .720, .0, .0);

 child = gtk_plot_canvas_text_new("Times-Roman", 12, 0, NULL, NULL, TRUE,
                          GTK_JUSTIFY_CENTER, 
                          "Format text mixing \\Bbold \\N\\i, italics, \\ggreek \\4\\N and \\+different fonts");
 gtk_plot_canvas_put_child(GTK_PLOT_CANVAS(canvas), child, .40, .765, .0, .0); 

 gtk_plot_text_set_border(&GTK_PLOT_CANVAS_TEXT(child)->text, 
                          GTK_PLOT_BORDER_SHADOW, 2, 0, 2);

 array = GTK_PLOT_ARRAY(gtk_plot_array_new(NULL, custom_labels, 12, GTK_TYPE_STRING, FALSE)); 
 gtk_plot_axis_set_tick_labels(gtk_plot_get_axis(GTK_PLOT(active_plot), GTK_PLOT_AXIS_BOTTOM), array); 
 gtk_plot_axis_use_custom_tick_labels(gtk_plot_get_axis(GTK_PLOT(active_plot), GTK_PLOT_AXIS_BOTTOM), TRUE);

 put_child(GTK_PLOT_CANVAS(canvas), .5, .5);

 return(vbox1);
}

static void
put_child(GtkPlotCanvas *canvas, gdouble x, gdouble y)
{
  GdkColormap *colormap;
  GtkPlotCanvasChild *child;
  GdkBitmap *mask;

  colormap = gdk_colormap_get_system();

  pixmap = gdk_pixmap_colormap_create_from_xpm_d(NULL, colormap, &mask, NULL,
                                                 plot_icon2);
  child = gtk_plot_canvas_pixmap_new(pixmap, mask);

  gtk_plot_canvas_put_child(canvas, child, x, y, x+.05, y+.05); 

  gdk_pixmap_unref(pixmap);
  gdk_bitmap_unref(mask);
}
